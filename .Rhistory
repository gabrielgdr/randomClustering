for(i in 1:length(transformacao)){
for(j in 1:length(algs)){
x1<-transformacao[i]
x2<-algs[j]
avg_results <- NULL
avg_results <- data.frame("algorithm"=x1,
"transformation"=x2,
"value"=sum(subset(df,transformation==x1 & algorithm==x2)[,4]))
result <- rbind(result,avg_results)
}
}
result
result<-data.frame()
for(i in 1:length(transformacao)){
for(j in 1:length(algs)){
x1<-transformacao[i]
x2<-algs[j]
avg_results <- NULL
avg_results <- data.frame("transformation"=x1,
"algorithm"=x2,
"value"=sum(subset(df,transformation==x1 & algorithm==x2)[,4]))
result <- rbind(result,avg_results)
}
}
result
library(randomClustering)
randomclust(dataset)
x=matrix(0,8,20)
x
x=matrix(0,20,8)
x
x=matrix(0,20,9)
x[,1]=transformations
transformations = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
x[,1]=transformations
x
algorithms <- c("hclust","kmeans","bclust","cba")
colnames(x)=algorithms
colnames(x)=c("X",algorithms)
c("X",algorithms)
x=matrix(0,20,4)
rownames(x)=transformations
colnames(x)=algotihms
colnames(x)=algorithms
x
colnames(x)
x[,colnames(x)=="cba"]
x[,colnames(x)==algortithms[1]]
x[rownames(x)==transformations[1],colnames(x)==algortithms[1]]=1
x
library(randomClustering)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
debugSource('C:/Users/Gabriel DR/Dropbox/gabriel_rodrigues/randomClustering/R/main.R')
rownames(result)=transformations
randomclust(dataset)
i
j
result
colnames(result)=algorithms
randomclust(dataset)
subset(result_partial,transformation==x1 & algorithm==x2)[,4]
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
result[rownames(result)==transformations[i],
colnames(result)==algortithms[j]]
result[rownames(result)==x1,
colnames(result)==x2]
library(randomClustering)
randomclust(dataset)
library(randomClustering)
dataset
randomclust(dataset)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
transformations="all"
algorithms="all"
iter=1
classes = c(rep(1,50),rep(2,50), rep(3,50))
if(algorithms=="all")
algorithms <- c("hclust","kmeans","bclust","cba")
if(transformations=="all")
transformations = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
result_partial<-data.frame()
for(i in 1:length(algorithms)){
for(j in 1:length(transformations)){
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter)
result_partial <- rbind(result_partial,result_partial_aux)
}
}
result_partial=normalizeValues(result_partial)
result_partial
result<-matrix(-1,length(transformations),length(algorithms))
rownames(result)=transformations
colnames(result)=algorithms
resutl
result
i=1
j=1
x1<-transformations[i]
x2<-algorithms[j]
x1,
x1
x2
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
result[rownames(result)==x1,
colnames(result)==x2]
j2
j=2
length(algorithms)
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
j=3
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
result
j=4
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
head(result)
library(randomClustering)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
library(randomClustering)
library(randomClustering)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
classes = c(rep(1,50),rep(2,50), rep(3,50))
if(algorithms=="all")
algorithms <- c("hclust","kmeans","bclust","cba")
if(transformations=="all")
transformations = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
result_partial<-data.frame()
for(i in 1:length(algorithms)){
for(j in 1:length(transformations)){
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter)
result_partial <- rbind(result_partial,result_partial_aux)
}
}
result_partial=normalizeValues(result_partial)
result<-matrix(-1,length(transformations),length(algorithms))
rownames(result)=transformations
colnames(result)=algorithms
for(i in 1:length(transformations)){
print("i=",i,"\n")
for(j in 1:length(algorithms)){
print("j=",j,"\n")
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
}
}
transformations="all"
algorithms="all"
classes = c(rep(1,50),rep(2,50), rep(3,50))
if(algorithms=="all")
algorithms <- c("hclust","kmeans","bclust","cba")
if(transformations=="all")
transformations = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
result_partial<-data.frame()
for(i in 1:length(algorithms)){
for(j in 1:length(transformations)){
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter)
result_partial <- rbind(result_partial,result_partial_aux)
}
}
result_partial=normalizeValues(result_partial)
result<-matrix(-1,length(transformations),length(algorithms))
rownames(result)=transformations
colnames(result)=algorithms
for(i in 1:length(transformations)){
print("i=",i,"\n")
for(j in 1:length(algorithms)){
print("j=",j,"\n")
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
}
}
for(i in 1:length(transformations)){
cat("i=",i,"\n")
for(j in 1:length(algorithms)){
cat("j=",j,"\n")
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
}
}
result
rr<-randomclust(dataset)
rr
gc()
dataset=as.matrix(iris[,1:4])
N = nrow(dataset)
for (i in 1:N) {
norma = sqrt(sum(dataset[i,]**2))
dataset[i,] = dataset[i,]/norma
}
library(randomClustering)
randomclust(dataset)
data = result
data<- randomclust(dataset)
data
library(gplots)
library(RColorBrewer)
mat_data <- data.matrix(data)
rownames(mat_data) <- rownames(data)
mat_data <- mat_data[,names(sort(apply(mat_data, 2, sum)))]
my_palette <- colorRampPalette(c("#ffffd9", "#41b6c4", "#081d58"))(n = 299) #results1
col_breaks = c(seq(-1,0,length=8), # for red
seq(0,0.8,length=7),  # for yellow
seq(0.81,20,length=7)) # for green
heatmap.2(mat_data,
main = "Heatmap", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(7,5),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
Rowv=FALSE,
key=TRUE,
keysize=1,
key.par=list(mar=c(3.5,0,3,0)),
Colv=FALSE,
#lwid=c(0.3,4), lhei=c(1,4),
dendrogram="none"
)
library(randomClustering)
heat(data)
dev.off()
heat(data)
dev.off()
data
for(i in 1:4)data$sum[i]=sum(data[i,])
soma=rep(0,20)
for(i in 1:4)soma[i]=sum(data[i,])
soma
for(i in 1:20)soma[i]=sum(data[i,])
soma
cbind(data,soma)
data[18,]
data[19,]
sum(data[19,])
data
data=cbind(data,soma)
data
sdata<-data[order(data[ncol(data)])]
sdata
sdata<-data[order(data[ncol(data)]),]
sdata
sdata<-data[order(data[,ncol(data)]),]
sdata
library(randomClustering)
library(randomClustering)
data<-randomclust(dataset)
heat(data)
classes = c(rep(1,50),rep(2,50), rep(3,50))
library(randomClustering)
data<-randomclust(dataset,classes)
heat(data)
install.packages("devtools")
library(devtools)
install_github("gabrielgdr/CBA")
library(cba)
data
dataset
x = kmeans(dataset,centers=3)
y = kmeans(dataset,centers=3)
cba(dataset,x,y,3)
cba(dataset,x$centers,y$centers,3)
x$centers
x$cluster
cba(dataset,x$cluster,y$cluster,3)
cba(dataset,x$cluster,y$cluster,3)
install_github("gabrielgdr/randomClustering")
library(randomClustering)
library(cba)
cba(dataset=iris[,1:4], kmeans(iris[,1:4],centers=3)$cluster, cutree(hclust(dist(iris[,1:4])),k=3),K=3)
cba(dataset, kmeans(iris[,1:4],centers=3)$cluster, cutree(hclust(dist(iris[,1:4])),k=3),K=3)
dataset
iris[,1:4]
library(randomClustering)
dataset
randomclust(dataset,classes,algorithms = c("CBA"))
library(cba)
randomclust(dataset,classes,algorithms = c("CBA"))
randomclust(dataset,classes
)
algorithms[1]=="all"
algorithms=c("all")
algorithms[1]=="all"
algorithms=="all"
library(randomClustering)
randomclust(dataset,classes,algorithms = c("cba"))
randomclust(dataset,classes,algorithms = c("cba"),transformations = c("N","M80"))
randomclust(dataset,classes,algorithms = c("cba"),transformations = c("N","M80"))
randomclust(dataset,classes,algorithms = c("cba"),transformations = c("N","M80"))
randomclust(dataset,classes,algorithms = c("cba"),transformations = c("N","M80"))
randomclust(dataset,classes,algorithms = c("cba"),transformations = c("N","M80"))
randomclust(dataset,classes,algorithms = c("bclust"),transformations = c("N","M80"))
randomclust(dataset,classes,algorithms = c("bclust"),transformations = c("N","M80"))
library(randomClustering)
library(randomClustering)
randomclust(dataset)
randomclust(dataset)
library(randomClustering)
library(randomClustering)
randomclust(dataset,K=3)
library(randomClustering)
library(randomClustering)
randomclust(dataset,K=3)
randomclust(dataset,classes)
0
library(randomClustering)
randomclust(dataset,classes)
randomclust(dataset=as.matrix(iris[,1:4]), classes=c(rep(1,50),rep(2, 50), rep(3, 50)))
library(randomClustering)
randomclust(dataset=as.matrix(iris[,1:4]), classes=c(rep(1,50),rep(2, 50), rep(3, 50)))
tdataset
dataset = as.matrix(dataset)
algorithms
transformations
transformations=c("all")
algorithms=c("all")
if(algorithms[1]=="all")
algorithms <- c("hclust","kmeans","bclust","cba")
if(transformations[1]=="all")
transformations = c("N","RMl100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
algorithms
transformations
i=1
j=1
result_partial<-data.frame()
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter,K)
iter=1
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter,K)
result_partial <- rbind(result_partial,result_partial_aux)
library(randomClustering)
randomclust(dataset=as.matrix(iris[,1:4]), classes=c(rep(1,50),rep(2, 50), rep(3, 50)))
randomclust(dataset,classes)
0
library(randomClustering)
randomclust(dataset,classes)
randomclust(dataset,classes)
ls()
library(randomClustering)
randomclust(dataset=as.matrix(iris[,1:4]), classes=c(rep(1,50),rep(2, 50), rep(3, 50)))
randomclust(dataset=as.matrix(iris[,1:4]),K=3)
randomclust(dataset=as.matrix(iris[,1:4]),K=3)
library(randomClustering)
randomclust(dataset=as.matrix(iris[,1:4]),K=3)
x=randomclust(dataset=as.matrix(iris[,1:4]),K=3)
x
nrow(x)
x$sum=rep(0,nrow(x))
sum=rep(0,nrow(x))
sum=rep(0,20
)
sum
cbind(x,sum)
dataset = as.matrix(dataset)
if(algorithms[1]=="all")
algorithms <- c("hclust","kmeans","bclust","cba")
if(transformations[1]=="all")
transformations = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
result_partial<-data.frame()
for(i in 1:length(algorithms)){
for(j in 1:length(transformations)){
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter,K)
result_partial <- rbind(result_partial,result_partial_aux)
}
}
result_partial=normalizeValues(result_partial,classes)
transformations=c("all"); algorithms=c("all")
classes=NULL
dataset = as.matrix(dataset)
if(algorithms[1]=="all")
algorithms <- c("hclust","kmeans","bclust","cba")
if(transformations[1]=="all")
transformations = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
result_partial<-data.frame()
for(i in 1:length(algorithms)){
for(j in 1:length(transformations)){
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter,K)
result_partial <- rbind(result_partial,result_partial_aux)
}
}
result_partial=normalizeValues(result_partial,classes)
dataset = as.matrix(dataset)
algorithms <- c("hclust","kmeans","bclust","cba")
transformations = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
result_partial<-data.frame()
for(i in 1:length(algorithms)){
for(j in 1:length(transformations)){
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter,K)
result_partial <- rbind(result_partial,result_partial_aux)
}
}
K=3
for(i in 1:length(algorithms)){
for(j in 1:length(transformations)){
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter,K)
result_partial <- rbind(result_partial,result_partial_aux)
}
}
result_partial=normalizeValues(result_partial,classes)
result<-matrix(-1,length(transformations),length(algorithms))
result
result<-matrix(-1,length(transformations),length(algorithms)+1)
reskt
result
rownames(result)=transformations
colnames(result)=algorithms
colnames(result)=c(algorithms,"sum")
result
result
i=1
j=1
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
result
for(j in 1:length(algorithms)){
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
}
result
result$sum[1]
result$sum[,1]
result$sum
result
result[1,colnames(result=="sum")]
result[1,colnames(result==sum)]
result[1,5]
result[1,5]=sum(result[1,1:4])
result[1,]
library(randomClustering)
x=randomclust(dataset=as.matrix(iris[,1:4]),K=3)
x=randomclust(dataset=as.matrix(iris[,1:4]),K=3)
x
x$s
ncol(x)
x[order(x[,ncol(x)])]
x[order(x[,ncol(x)]),]
x=x[order(x[,ncol(x)])]
x
x
x=randomclust(dataset=as.matrix(iris[,1:4]),K=3)
x=x[order(x[,ncol(x)]),]
x
x1=x
x[,ncol(x)]=NULL
x[,1:ncol(x)-1]
x1=x[,1:ncol(x)-1]
x1
library(randomClustering)
x
heat(x)
library(randomClustering)
heat(x)
heat(x)
x
randomClust(dataset=iris[,1:4],K=3)
library(randomClustering)
randomclust(dataset=iris[,1:4],K=3)
x<-randomclust(dataset=iris[,1:4],K=3)
heat(x)
library(randomClustering)
data<−randomclust(dataset=iris[,1:4],K=3)
data
heat(data)
library(randomClustering)
data<−randomclust(dataset=iris[,1:4],K=3)
data
data<−randomclust(dataset=iris[,1:4],K=3)
library(randomClustering)
data<−randomclust(dataset=iris[,1:4],K=3)
data
heat(data)
cba(dataset=iris[,1:4],kmeans(iris[,1:4],centers=3)$cluster,cutree(hclust(dist(iris[,1:4])),k=3),K=3)

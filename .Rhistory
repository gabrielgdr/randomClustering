}
## Densidade
if(trans=="DA"){
tdataset= tadensidade(dataset,K)
}
if(trans=="DR"){
tdataset= trdensidade(dataset,K)
}
dists = dist(tdataset)
if(algorithm=="kmeans"){
a <- NULL
th <- 0
while(is.null(a) || th>10 ){
try(a <- kmeans(tdataset, iter.max=40, centers=K, nstart=1)$cluster)
th = th+1
}
result_partition = organizavetor(a)
partitionings[j,] = result_partition
}
if(th>10){
cat("\n threshold exceeded \n")
}
else {
j=j+1
}
}
ari = rep(0,iteracoes)
slh = rep(0,iteracoes)
dun = rep(0,iteracoes)
accuracy = 1-signif(avaliacao(partitionings, classes, K)/N, digits = 3)
for(i in 1:iteracoes){
ari[i] = signif(adjustedRandIndex(partitionings[i,],classes), digits = 3)
if(length(unique(partitionings[i,]))>1)
slh[i] = signif(mean(silhouette(partitionings[i,], dists)[,3]), digits = 3)
else
slh[i] = 0
if(length(unique(partitionings[i,]))==1)
dun[i] = 0
else{
dun[i] = signif(dunn(dists,partitionings[i,]), digits = 3)
if(dun[i]==Inf)
dun[i] = 1
}
}
dun
slh
accuracy
library(randomClustering)
run_clustering(dataset,classes,"N","kmeans",2)
run_clustering(dataset,classes,"N","kmeans",3)
run_clustering(dataset,classes,"N","kmeans",4)
result<-data.frame()
result
rbind(result,result)
library(randomClustering)
dataset=as.matrix(iris[,1:4])
classes = c(rep(1,50),rep(2,50), rep(3,50))
for (i in 1:N) {
norma = sqrt(sum(dataset[i,]**2))
dataset[i,] = dataset[i,]/norma
}
library(randomClustering)
randomclust(dataset)
library(randomClustering)
library(randomClustering,transformations="N")
library(randomClustering,transformations="N")
library(randomClustering)
randomclust(randomClustering,transformations="N")
randomclust(dataset,transformations="N")
randomclust(dataset,transformations="N",...)
randomclust(dataset,transformations="N")
randomclust(dataset,transformations="N",iterations=1)
library(randomClustering)
randomclust(dataset,transformations="N",iterations=1)
randomclust(dataset,transformations="N",iterations=1)
iterations
ls()
library(randomClustering)
randomclust(dataset,transformations="N")
randomclust(dataset,transformations="N",iterations=1)
library(randomClustering)
randomclust(dataset,transformations="N",iterations=1)
randomclust(dataset,transformations="N")
randomclust(dataset,transformations="N",iterations=1)
randomclust(dataset,transformations="N")
randomclust(dataset,transformations="N",iter = 1)
randomclust(dataset,transformations="N",iter = 1)
library(randomClustering)
randomclust(dataset,transformations="N")
library(randomClustering)
randomclust(dataset,transformations="N")
algorithms=="all"
algorithms="all"
algorithms
algortithms <- c("hclust","kmeans","bclust","hkclustering","dbscan")
algorithms
library(randomClustering)
randomclust(dataset,transformations="N")
result_aux <- run_clustering(dataset,classes,transformations,algorithm = "kmeans",iter)
result_aux <- run_clustering(dataset,classes,transformations,algorithm = "kmeans",iter=1)
result_aux <- run_clustering(dataset,classes,"N",algorithm = "kmeans",iter=1)
result_aux
result
result <- rbind(result,result_aux)
result
result_aux <- run_clustering(dataset,classes,"N",algorithm = "kmea",iter=1)
result_aux
result <- rbind(result,result_aux)
result
library(randomClustering)
randomclust(dataset,transformations="N")
library(randomClustering)
randomclust(dataset,transformations="N")
randomclust(dataset,transformations="N")
head(dataset)
library(randomClustering)
library(randomClustering)
library(randomClustering)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
df<-randomclust(dataset)
df
algs <- c("hclust","kmeans","bclust")
medidas = c("accuracy","ari","dunn","slh")
df<-randomclust(dataset,transformations="N")
df
library(randomClustering)
df<-randomclust(dataset)
df<-randomclust(dataset,transformations="N")
library(randomClustering)
df<-randomclust(dataset)
df
library(randomClustering)
randomclust(dataset)
randomclust(dataset)
df<- randomclust(dataset)
df
dfb=df
dfb
val = subset(df,df$medida=="ari")[,5]
rn = row.names(subset(df,df$medida=="ari"))
nval = (val-min(val))/(max(val)-min(val))
df[rn,5]=nval
val = subset(df,df$medida=="dunn")[,5]
rn = row.names(subset(df,df$medida=="dunn"))
nval = (val-min(val))/(max(val)-min(val))
df[rn,5]=nval
val = subset(df,df$medida=="slh")[,5]
rn = row.names(subset(df,df$medida=="slh"))
nval = (val-min(val))/(max(val)-min(val))
df[rn,5]=nval
val = subset(df,df$medida=="ari")[,5]
val = subset(df,df$medida=="ari")[,4]
rn = row.names(subset(df,df$medida=="ari"))
nval = (val-min(val))/(max(val)-min(val))
val
subset(df,df$medida=="ari")[,4]
subset(df,df$medida=="ari")[,3]
df
subset(df,df$medida=="ari")[,2]
val=subset(df,df$medida=="ari")[,2]
val
min(val)
subset(df,df$measure=="ari")[,2]
val = subset(df,df$measure=="ari")[,2]
rn = row.names(subset(df,df$measure=="ari"))
nval = (val-min(val))/(max(val)-min(val))
df[rn,2]=nval
val = subset(df,df$measure=="dunn")[,2]
rn = row.names(subset(df,df$measure=="dunn"))
nval = (val-min(val))/(max(val)-min(val))
df[rn,2]=nval
val = subset(df,df$measure=="slh")[,2]
rn = row.names(subset(df,df$measure=="slh"))
nval = (val-min(val))/(max(val)-min(val))
df[rn,2]=nval
val = subset(df,df$measure=="ari")[,2]
rn = row.names(subset(df,df$measure=="ari"))
nval = (val-min(val))/(max(val)-min(val))
val
rn
subset(df,df$measure=="ari")[,2]
subset(df,df$measure=="ari")[,4]
val = subset(df,df$measure=="ari")[,4]
rn = row.names(subset(df,df$measure=="ari"))
nval = (val-min(val))/(max(val)-min(val))
df[rn,4]=nval
val = subset(df,df$measure=="dunn")[,4]
rn = row.names(subset(df,df$measure=="dunn"))
nval = (val-min(val))/(max(val)-min(val))
df[rn,4]=nval
val = subset(df,df$measure=="slh")[,4]
rn = row.names(subset(df,df$measure=="slh"))
nval = (val-min(val))/(max(val)-min(val))
df[rn,4]=nval
library(randomClustering)
randomclust(dataset)
df<-randomclust(dataset)
head(df)
head(dfb)
algs=algorithms
algs
algs= c("hclust","kmeans","bclust","cba")
algs
transformacao = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
transformacao
medidas = c("accuracy","ari","dunn","slh")
head(df)
i=1
j=1
l=1
x2<-transformacao[j]
x3<-algs[i]
subset(df,transformacao==x2 & algoritmo==x3)[,4]
subset(df,transformacao==x2 & algs==x3)[,4]
x2
x3
head(df)
subset(df,transformation==x2 & algs==x3)[,4]
subset(df,transformation==x2 & algorithm==x3)[,4]
sum(subset(df,transformation==x2 & algorithm==x3)[,4])
fd
df
result<-data.frame()
for(i in 1:length(transformacao)){
for(j in 1:length(algs)){
x1<-transformacao[i]
x2<-algs[j]
avg_results <- NULL
avg_results <- data.frame("algorithm"=x1,
"transformation"=x2,
"value"=sum(subset(df,transformation==x1 & algorithm==x2)[,4]))
result <- rbind(result,avg_results)
}
}
result
result<-data.frame()
for(i in 1:length(transformacao)){
for(j in 1:length(algs)){
x1<-transformacao[i]
x2<-algs[j]
avg_results <- NULL
avg_results <- data.frame("transformation"=x1,
"algorithm"=x2,
"value"=sum(subset(df,transformation==x1 & algorithm==x2)[,4]))
result <- rbind(result,avg_results)
}
}
result
library(randomClustering)
randomclust(dataset)
x=matrix(0,8,20)
x
x=matrix(0,20,8)
x
x=matrix(0,20,9)
x[,1]=transformations
transformations = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
x[,1]=transformations
x
algorithms <- c("hclust","kmeans","bclust","cba")
colnames(x)=algorithms
colnames(x)=c("X",algorithms)
c("X",algorithms)
x=matrix(0,20,4)
rownames(x)=transformations
colnames(x)=algotihms
colnames(x)=algorithms
x
colnames(x)
x[,colnames(x)=="cba"]
x[,colnames(x)==algortithms[1]]
x[rownames(x)==transformations[1],colnames(x)==algortithms[1]]=1
x
library(randomClustering)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
debugSource('C:/Users/Gabriel DR/Dropbox/gabriel_rodrigues/randomClustering/R/main.R')
rownames(result)=transformations
randomclust(dataset)
i
j
result
colnames(result)=algorithms
randomclust(dataset)
subset(result_partial,transformation==x1 & algorithm==x2)[,4]
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
result[rownames(result)==transformations[i],
colnames(result)==algortithms[j]]
result[rownames(result)==x1,
colnames(result)==x2]
library(randomClustering)
randomclust(dataset)
library(randomClustering)
dataset
randomclust(dataset)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
transformations="all"
algorithms="all"
iter=1
classes = c(rep(1,50),rep(2,50), rep(3,50))
if(algorithms=="all")
algorithms <- c("hclust","kmeans","bclust","cba")
if(transformations=="all")
transformations = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
result_partial<-data.frame()
for(i in 1:length(algorithms)){
for(j in 1:length(transformations)){
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter)
result_partial <- rbind(result_partial,result_partial_aux)
}
}
result_partial=normalizeValues(result_partial)
result_partial
result<-matrix(-1,length(transformations),length(algorithms))
rownames(result)=transformations
colnames(result)=algorithms
resutl
result
i=1
j=1
x1<-transformations[i]
x2<-algorithms[j]
x1,
x1
x2
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
result[rownames(result)==x1,
colnames(result)==x2]
j2
j=2
length(algorithms)
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
j=3
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
result
j=4
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
head(result)
library(randomClustering)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
library(randomClustering)
library(randomClustering)
randomclust(dataset)
library(randomClustering)
randomclust(dataset)
classes = c(rep(1,50),rep(2,50), rep(3,50))
if(algorithms=="all")
algorithms <- c("hclust","kmeans","bclust","cba")
if(transformations=="all")
transformations = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
result_partial<-data.frame()
for(i in 1:length(algorithms)){
for(j in 1:length(transformations)){
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter)
result_partial <- rbind(result_partial,result_partial_aux)
}
}
result_partial=normalizeValues(result_partial)
result<-matrix(-1,length(transformations),length(algorithms))
rownames(result)=transformations
colnames(result)=algorithms
for(i in 1:length(transformations)){
print("i=",i,"\n")
for(j in 1:length(algorithms)){
print("j=",j,"\n")
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
}
}
transformations="all"
algorithms="all"
classes = c(rep(1,50),rep(2,50), rep(3,50))
if(algorithms=="all")
algorithms <- c("hclust","kmeans","bclust","cba")
if(transformations=="all")
transformations = c("N","RM100","RM20","RM50","RM80","M100","M20","M50","M80","RUM100","RUM20","RUM50","RUM80","UM100","UM20","UM50","UM80","R","DA","DR")
result_partial<-data.frame()
for(i in 1:length(algorithms)){
for(j in 1:length(transformations)){
result_partial_aux <- run_clustering(dataset,classes,transformations[j],algorithm = algorithms[i],iter)
result_partial <- rbind(result_partial,result_partial_aux)
}
}
result_partial=normalizeValues(result_partial)
result<-matrix(-1,length(transformations),length(algorithms))
rownames(result)=transformations
colnames(result)=algorithms
for(i in 1:length(transformations)){
print("i=",i,"\n")
for(j in 1:length(algorithms)){
print("j=",j,"\n")
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
}
}
for(i in 1:length(transformations)){
cat("i=",i,"\n")
for(j in 1:length(algorithms)){
cat("j=",j,"\n")
x1<-transformations[i]
x2<-algorithms[j]
result[rownames(result)==x1,
colnames(result)==x2]=
sum(subset(result_partial,transformation==x1 & algorithm==x2)[,4])
}
}
result
rr<-randomclust(dataset)
rr
gc()
dataset=as.matrix(iris[,1:4])
N = nrow(dataset)
for (i in 1:N) {
norma = sqrt(sum(dataset[i,]**2))
dataset[i,] = dataset[i,]/norma
}
library(randomClustering)
randomclust(dataset)
data = result
data<- randomclust(dataset)
data
library(gplots)
library(RColorBrewer)
mat_data <- data.matrix(data)
rownames(mat_data) <- rownames(data)
mat_data <- mat_data[,names(sort(apply(mat_data, 2, sum)))]
my_palette <- colorRampPalette(c("#ffffd9", "#41b6c4", "#081d58"))(n = 299) #results1
col_breaks = c(seq(-1,0,length=8), # for red
seq(0,0.8,length=7),  # for yellow
seq(0.81,20,length=7)) # for green
heatmap.2(mat_data,
main = "Heatmap", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(7,5),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
Rowv=FALSE,
key=TRUE,
keysize=1,
key.par=list(mar=c(3.5,0,3,0)),
Colv=FALSE,
#lwid=c(0.3,4), lhei=c(1,4),
dendrogram="none"
)
library(randomClustering)
heat(data)
dev.off()
heat(data)
dev.off()
data
for(i in 1:4)data$sum[i]=sum(data[i,])
soma=rep(0,20)
for(i in 1:4)soma[i]=sum(data[i,])
soma
for(i in 1:20)soma[i]=sum(data[i,])
soma
cbind(data,soma)
data[18,]
data[19,]
sum(data[19,])
data
data=cbind(data,soma)
data
sdata<-data[order(data[ncol(data)])]
sdata
sdata<-data[order(data[ncol(data)]),]
sdata
sdata<-data[order(data[,ncol(data)]),]
sdata
library(randomClustering)
library(randomClustering)
data<-randomclust(dataset)
heat(data)
classes = c(rep(1,50),rep(2,50), rep(3,50))
library(randomClustering)
data<-randomclust(dataset,classes)
heat(data)
